// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// createFisherMat
NumericMatrix createFisherMat(int allocationsPerArm);
RcppExport SEXP _monteCarloProportions_createFisherMat(SEXP allocationsPerArmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type allocationsPerArm(allocationsPerArmSEXP);
    rcpp_result_gen = Rcpp::wrap(createFisherMat(allocationsPerArm));
    return rcpp_result_gen;
END_RCPP
}
// createChi2Mat
NumericMatrix createChi2Mat(int allocationsPerArm);
RcppExport SEXP _monteCarloProportions_createChi2Mat(SEXP allocationsPerArmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type allocationsPerArm(allocationsPerArmSEXP);
    rcpp_result_gen = Rcpp::wrap(createChi2Mat(allocationsPerArm));
    return rcpp_result_gen;
END_RCPP
}
// monteCarloFisherR
List monteCarloFisherR(int alloc, IntegerMatrix outcomes);
RcppExport SEXP _monteCarloProportions_monteCarloFisherR(SEXP allocSEXP, SEXP outcomesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type outcomes(outcomesSEXP);
    rcpp_result_gen = Rcpp::wrap(monteCarloFisherR(alloc, outcomes));
    return rcpp_result_gen;
END_RCPP
}
// multiTrialTrueFalsePos
void multiTrialTrueFalsePos(NumericVector baselineRisks, IntegerVector participantsPerArm, double absRRStep, int monteCarloRuns, Rcpp::String path);
RcppExport SEXP _monteCarloProportions_multiTrialTrueFalsePos(SEXP baselineRisksSEXP, SEXP participantsPerArmSEXP, SEXP absRRStepSEXP, SEXP monteCarloRunsSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type baselineRisks(baselineRisksSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type participantsPerArm(participantsPerArmSEXP);
    Rcpp::traits::input_parameter< double >::type absRRStep(absRRStepSEXP);
    Rcpp::traits::input_parameter< int >::type monteCarloRuns(monteCarloRunsSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type path(pathSEXP);
    multiTrialTrueFalsePos(baselineRisks, participantsPerArm, absRRStep, monteCarloRuns, path);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_monteCarloProportions_createFisherMat", (DL_FUNC) &_monteCarloProportions_createFisherMat, 1},
    {"_monteCarloProportions_createChi2Mat", (DL_FUNC) &_monteCarloProportions_createChi2Mat, 1},
    {"_monteCarloProportions_monteCarloFisherR", (DL_FUNC) &_monteCarloProportions_monteCarloFisherR, 2},
    {"_monteCarloProportions_multiTrialTrueFalsePos", (DL_FUNC) &_monteCarloProportions_multiTrialTrueFalsePos, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_monteCarloProportions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
